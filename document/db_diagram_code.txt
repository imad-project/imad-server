/*
 * ==================================================
 * https://dbdiagram.io/ 에서 편집하는 DB UML의 코드
 * ==================================================
 */

Table User {
  user_id integer [primary key]

  email varchar
  password varchar

  user_nickname varchar
  gender varchar
  birth_year integer
  age_range integer [note: "유저로부터 출생연도를 입력받고 연령대를 계산한다."]
  profile_image varchar

  preferred_tv_genres integer [note: "유저 TV 선호 장르. 실제로는 별도의 테이블로 구현됨"]
  preferred_movie_genres integer

  role varchar [note: "회원가입 후 추가 정보를 입력하면 'USER', 그렇지 않으면 'GUEST'"]
  auth_provider varchar [note: "자체 회원가입 시 'IMAD', 그 외에는 소셜 서비스 이름"]
  social_id varchar [note: "소셜 로그인 시 발급받는 해당 소셜에서의 고유 ID"]

  oauth2_access_token varchar
  refresh_token varchar
}

/*
 * Movie / TV Program 상위 테이블
 * ===============================================
 */
Table Contents {
  contents_id integer [primary key]
  contents_type varchar [note: "MOIVE, TV, ANIMATINO으로 임의로 구분함"]

  tmdb_id integer
  tmdb_type varchar [note: "TMDB의 분류 기준으로, TV와 MOVIE가 있음"]

  translated_title varchar
  origianl_title varchar
  origianl_language varchar
  tagline varchar

  status varchar
  overview varchar
  poster_path varchar
  certifications varchar [note: "시청 등급"]

  production_countries varchar
  contents_genres varchar [note: "작품의 장르 리스트. 별도의 테이블로 구현됨"]

  review_cnt integer [note: "작품 리뷰 수"]
  posting_cnt integer [note: "작품 게시글 수"]
  imad_score float [note: "IMAD 자체 평점"]
}

/*
 * Movie 관련 테이블
 * ===============================================
 */
Table MovieData {
  contents_id integer [primary key]

  release_date date [note: "국내 개봉일 기준"]
  release_status integer [note: "개봉 여부"]
  runtime integer
}

/*
 * TV Program 관련 테이블
 * ===============================================
 */
Table TvProgramData {
  contents_id integer [primary key]

  first_air_date date
  last_air_date date
  number_of_episodes integer
  number_of_seasons integer
}

Table Networks [note: "방송사, OTT 등"] {
  networks_id integer [primary key]

  networks_name varchar
  logo_path varchar
  origin_country varchar
}

Table Broadcaster {
  broadcaster_id integer [primary key]
  contents_id integer

  networks_id integer [primary key]
}

Table Season {
  season_id integer [primary key]

  name varchar
  air_date date
  episode_count integer
  overview varchar
  poster_path varchar
  season_number integer
}

Table SeasonCollection {
  season_collection_id integer [primary key]

  contents_id integer
  season_id integer [primary key]
}


/*
 * 배우 및 스태프 관련 테이블
 * ===============================================
 */
 Table Person {
  person_id integer [primary key]

  original_name varchar
  translated_name varchar
  gender integer
  profile_path varchar
 }

 Table Credit {
  credit_id varchar [primary key]

  contents_id integer
  person_id integer

  department varchar [note: "Ex) Writing"]
  job varchar [note: "Ex) Story"]
  known_for_department varchar [note: "유명분야"]
  character varchar [note: "스태프가 연기도 겸한 경우"]

  credit_type varchar [note: "credit의 타입이 cast(배우)인지, crew(스태프)인지 구분하기 위한 칼럼"]
  importance_order int [note: "crew 데이터의 리스트에서 중복될수록 +1"]
 }


/*
 * 장르 관련 테이블
 * ===============================================
 */
Table Genre {
  genre_id integer [primary key]

  name varchar
  genre_type integer
}


/*
 * 리뷰 관련 테이블
 * ===============================================
 */
Table Review {
  review_id integer [primary key]

  user_id integer
  contents_id integer

  title varchar
  content varchar
  score float [note: "작품 평점"]
  is_spoiler boolean

  like_cnt integer
  dislike_cnt integer

  created_at datetime
  modified_at datetime
}


/*
 * 게시글 관련 테이블
 * ===============================================
 */
Table Posting {
  posting_id integer [primary key]

  user_id integer
  contents_id integer

  category integer
  title varchar
  content varchar
  is_spoiler boolean

  view_cnt integer
  comment_cnt integer
  like_cnt integer
  dislike_cnt integer

  created_at datetime
  modified_at datetime
}

Table Comment {
  comment_id integer [primary key]

  user_id integer
  posting_id integer

  content text
  parent_id integer       [note: "댓글 부모 ID. 이 댓글이 최상위라면 null 값이 들어감"]
  is_removed boolean      [note: "댓글 삭제 여부"]

  like_cnt integer
  dislike_cnt integer

  created_at datetime
  modified_at datetime
}


/*
 * 리뷰 및 게시글 추천/비추천 관련 테이블
 * ===============================================
 * 추천이면 +1, 비추천이면 -1, 아무 상태도 아니면 0이므로 해당 데이터 삭제
 */
Table ReviewLike {
  review_like_id integer [primary key]

  user_id integer
  review_id integer

  like_status integer [note: "추천이면 +1, 비추천이면 -1, 아무 상태도 아니면 해당 데이터 삭제"]
}

Table PostingLike {
  posting_like_id integer [primary key]

  user_id integer
  posting_id integer

  like_status integer [note: "추천이면 +1, 비추천이면 -1, 아무 상태도 아니면 해당 데이터 삭제"]
}


/*
 * 북마크 관련 테이블
 * ===============================================
 * 추천이면 +1, 비추천이면 -1, 아무 상태도 아니면 0이므로 해당 데이터 삭제
 */
 Table PostingScrap {
  posting_bookmark_id integer [primary key]

  user_id integer
  posting_id integer
}

 Table ContentsBookmark {
  contents_bookmark_id integer [primary key]

  user_id integer
  contents_id integer
}


/*
 * 랭킹 관련 테이블
 * ===============================================
 */

// 작품의 랭킹 점수를 저장하는 테이블. 자정마다 초기화된다.
// 이 테이블의 데이터를 기반으로 랭킹 데이터가 갱신된다.
Table ContentsDailyRankingScore {
  id integer [primary key]

  contents_id integer

  ranking_score integer
}

Table RankingBaseEntity {
  id integer [primary key]

  contents_id integer

  ranking integer [note: "현재 랭킹 순위"]
  ranking_changed integer [note: "이전 랭킹 데이터와의 순위 차이. 순위권에 새로 진입한 작품인 경우 NULL 값이 들어간다."]
  ranking_score integer [note: "랭킹 점수"]
}

// 아래 3개 테이블은 RankingBaseEntity를 상속하여 필드를 그대로 사용한다.
// 각자 주간/월간/전체 랭킹 데이터를 저장하고 있다.
Table RankingWeekly {
  id integer [primary key]
}
Table RankingMonthly {
  id integer [primary key]
}
Table RankingAllTime {
  id integer [primary key]
}

/*
 * 오늘의 리뷰/게시글 테이블
 * ===============================================
 * 좋아요, 조회, 댓글 등의 활동이 발생할 때마다 해당 리뷰/게시글의 인기 점수를 갱신한다.
 * 이들을 종합해 자정마다 오늘의 리뷰/게시글을 뽑는다.
 */

Table TodayPopularReview {
  id integer [primary key]

  review_id integer
  popular_score integer [note: "인기 리뷰 점수"]
}

Table TodayPopularPosting {
  id integer [primary key]

  posting_id integer
  popular_score integer [note: "인기 게시글 점수"]
}

/*
 * 추천 관련 테이블
 * ===============================================
 */

// 서비스 활동 기반 추천 기능을 위해 사용되는 테이블
// IMAD에서 유저의 여러 활동들을 기록한다.
// 많은 테이블과의 관계가 연결되어 있기에 가독성을 위해 UML 상에서 따로 Ref를 표시하지는 않는다.
// 대신 필드 속성에 해당 entity를 명시했다.
Table UserActivity {
  id integer [primary key, not null]

  user_id UserAccount [not null]

  contents_id Contents [not null]
  contents_bookmark_id ContentsBookmark [not null]

  review_id Review
  review_like_id ReviewLike

  posting_id Posting
  posting_like_id PostingLike

  activity_type enum [not null, note: "유저 활동 종류"]
}

/*
 * 참조 관계
 * ===============================================
 */
// Contents : Movie / TV Program
Ref: Contents.contents_id < MovieData.contents_id
Ref: Contents.contents_id < TvProgramData.contents_id

Ref: TvProgramData.contents_id < Broadcaster.contents_id
Ref: Networks.networks_id < Broadcaster.networks_id

Ref: TvProgramData.contents_id < SeasonCollection.contents_id
Ref: Season.season_id < SeasonCollection.season_id


// Contents : Crew / Actor
Ref: Contents.contents_id < Credit.contents_id
Ref: Person.person_id < Credit.person_id


// Review : User / Contents
Ref: User.user_id < Review.user_id
Ref: Contents.contents_id < Review.contents_id


// Posting : Comment
Ref: User.user_id < Posting.user_id
Ref: Contents.contents_id < Posting.contents_id

Ref: User.user_id < Comment.user_id
Ref: Posting.posting_id < Comment.posting_id


// Contetns : Score / Ranking
Ref: Contents.contents_id < ContentsDailyRankingScore.contents_id
Ref: Contents.contents_id < RankingBaseEntity.contents_id

// Review/Posting : TodayPopular
Ref: Review.review_id < TodayPopularReview.review_id
Ref: Posting.posting_id < TodayPopularPosting.posting_id


// Like : Review / Posting
Ref: User.user_id < ReviewLike.user_id
Ref: Review.review_id < ReviewLike.review_id

Ref: User.user_id < PostingLike.user_id
Ref: Posting.posting_id < PostingLike.posting_id


// Bookmark : Aritlce / Contents / User
Ref: User.user_id < PostingScrap.user_id
Ref: Posting.posting_id < PostingScrap.posting_id

Ref: User.user_id < ContentsBookmark.user_id
Ref: Contents.contents_id < ContentsBookmark.contents_id
